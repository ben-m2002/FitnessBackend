name: BYLT CI/CD Pipeline

on:
  push:
    branches: [ main ]

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
  MAVEN_OPTS: "-Dplexus.security.dispatcher.skip=true"

jobs:
  build_test_lint:
    runs-on: ubuntu-latest
    steps:
      # 1 Checkout
      - uses: actions/checkout@v3

      # 2 Set up JDK
      - uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 17

#      # 3 Lint (Checkstyle)
#      - name: Run Checkstyle
#        run: ./mvnw --batch-mode checkstyle:check
#        continue-on-error: true
#
#
#
#      # 4 Tests
#      - name: Run unit tests
#        run: ./mvnw --batch-mode test -e -X
#        continue-on-error: true

      # 5 Package
      - name: Build JAR
        run: ./mvnw --batch-mode package -DskipTests

      # 6 Configure AWS creds
      - uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # 7 Login to ECR
      - id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # 8 Build & push Docker image
      - name: Build and push image
        env:
          IMAGE_TAG: ${{ github.sha }}
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          docker build -t $REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "IMAGE_URI=$REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_ENV

  deploy:
    needs: build_test_lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # Render new task definition (replace placeholder image)
      - name: Fill in new image URI
        id: task-def
        run: |
          # Substitute IMAGE_URI placeholder
          sed -e "s|IMAGE_URI|${{ env.IMAGE_URI }}|g" ecs-task-definition.json > task-def-raw.json
          
          # Strip Describeâ€‘only and preview keys
          jq 'del(
                .compatibilities,
                .taskDefinitionArn,
                .requiresAttributes,
                .revision,
                .status,
                .registeredAt,
                .registeredBy,
                .containerDefinitions[].enableFaultInjection
              )' task-def-raw.json > task-def.json
          
          echo "taskDef=task-def.json" >> $GITHUB_OUTPUT

      # Deploy to ECS
      - name: Deploy to ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.taskDef }}
          service: ${{ secrets.ECS_SERVICE }}
          cluster: ${{ secrets.ECS_CLUSTER }}
          wait-for-service-stability: true