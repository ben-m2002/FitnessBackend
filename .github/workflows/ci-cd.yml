name: BYLT CI/CD Pipeline

on:
  push:
    branches: [ main ]

env:
  AWS_REGION:     us-east-1
  AWS_ACCOUNT_ID: 692350947347
  ECR_REPOSITORY: bylt-backend
  MAVEN_OPTS:     "-Dplexus.security.dispatcher.skip=true"

jobs:
  # ──────────────────────────────────────────────────────────────
  # Build JAR, build & push Docker image
  # ──────────────────────────────────────────────────────────────
  build_and_push:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 17

      - name: Build JAR (skip tests)
        run: ./mvnw --batch-mode package -DskipTests

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:            ${{ env.AWS_REGION }}

      - uses: aws-actions/amazon-ecr-login@v2

      - name: Build & push Docker image
        run: |
          IMAGE_URI=${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPOSITORY}:${GITHUB_SHA}
          docker build -t "$IMAGE_URI" .
          docker push "$IMAGE_URI"

  # ──────────────────────────────────────────────────────────────
  # Render task-def, then deploy (re-attaching TG each time)
  # ──────────────────────────────────────────────────────────────
  deploy:
    needs: build_and_push
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:            ${{ env.AWS_REGION }}

      # Compute IMAGE_URI again locally so it isn’t redacted
      - name: Set IMAGE_URI env
        run: echo "IMAGE_URI=${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPOSITORY}:${GITHUB_SHA}" >> $GITHUB_ENV

      - name: Render ECS task definition
        id: render
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ecs-task-definition.json
          container-name:  app
          image: ${{ env.IMAGE_URI }}
          secrets: |
            SPRING_DATASOURCE_USERNAME=${{ secrets.SPRING_USERNAME_ARN }}
            SPRING_DATASOURCE_URL=${{ secrets.SPRING_URL_ARN }}
            SPRING_DATASOURCE_PASSWORD=${{ secrets.SPRING_PASSWORD_ARN }}

      - name: Deploy to ECS (bind TG every run)
        run: |
          TG_ARN="arn:aws:elasticloadbalancing:us-east-1:692350947347:targetgroup/bylt-api-tg/a8069a51f25dbaf7"

          aws ecs update-service \
            --cluster bylt-cluster \
            --service bylt-api-service \
            --task-definition "${{ steps.render.outputs.task-definition-arn }}" \
            --load-balancers "targetGroupArn=$TG_ARN,containerName=app,containerPort=8080" \
            --force-new-deployment

          aws ecs wait services-stable \
            --cluster bylt-cluster \
            --services bylt-api-service