name: BYLT CI/CD Pipeline

on:
  push:
    branches:
      - main

env:
  AWS_REGION:      us-east-1
  AWS_ACCOUNT_ID:  692350947347      # ← your account ID; not secret
  ECR_REPOSITORY:  bylt-backend           # plain text
  MAVEN_OPTS:      "-Dplexus.security.dispatcher.skip=true"

jobs:
  build_and_push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 17

      - name: Build JAR (skip CI tests)
        run: ./mvnw --batch-mode package -DskipTests

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:            ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build & push Docker image
        run: |
          TAG=${GITHUB_SHA}
          URI=${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}:$TAG
          docker build -t "$URI" .
          docker push "$URI"
          echo "Built and pushed $URI"

  deploy:
    needs: build_and_push
    runs-on: ubuntu-latest
    env:
      IMAGE_TAG:      ${{ github.sha }}
      AWS_REGION:     ${{ env.AWS_REGION }}
      AWS_ACCOUNT_ID: ${{ env.AWS_ACCOUNT_ID }}
      ECR_REPOSITORY: ${{ env.ECR_REPOSITORY }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:            ${{ env.AWS_REGION }}

      - name: Build IMAGE_URI
        run: |
          IMAGE_URI=${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPOSITORY}:${IMAGE_TAG}
          echo "IMAGE_URI=$IMAGE_URI" >> $GITHUB_ENV

      - name: Prepare & sanitize ECS task definition
        run: |
          sed -e "s|IMAGE_URI|${IMAGE_URI}|g" ecs-task-definition.json \
            | jq 'del(
                .compatibilities,
                .taskDefinitionArn,
                .requiresAttributes,
                .revision,
                .status,
                .registeredAt,
                .registeredBy,
                .containerDefinitions[].enableFaultInjection
              )' > task-def.json

      - name: Register new ECS task definition (AWS CLI)
        run: aws ecs register-task-definition --cli-input-json file://task-def.json

      - name: Update ECS service
        run: |
          aws ecs update-service \
            --cluster ${{ secrets.ECS_CLUSTER }} \
            --service ${{ secrets.ECS_SERVICE }} \
            --force-new-deployment

      - name: Wait for service stability
        run: |
          aws ecs wait services-stable \
            --cluster ${{ secrets.ECS_CLUSTER }} \
            --services ${{ secrets.ECS_SERVICE }}