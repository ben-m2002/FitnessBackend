name: BYLT CI/CD Pipeline

on:
  push:
    branches:
      - main

env:
  AWS_REGION:     ${{ secrets.AWS_REGION }}
  ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
  MAVEN_OPTS:     "-Dplexus.security.dispatcher.skip=true"

jobs:
  build_and_push:
    runs-on: ubuntu-latest
    outputs:
      image_uri: ${{ steps.push-image.outputs.image_uri }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 17

      - name: Build JAR (skip tests in CI)
        run: ./mvnw --batch-mode package -DskipTests

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:            ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build & push Docker image
        id: push-image
        env:
          IMAGE_TAG:      ${{ github.sha }}
          REGISTRY:       ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.ECR_REPOSITORY }}
        run: |
          URI="$REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
          docker build -t "$URI" .
          docker push "$URI"
          echo "image_uri=$URI" >> $GITHUB_OUTPUT

  deploy:
    needs: build_and_push
    runs-on: ubuntu-latest
    env:
      IMAGE_URI: ${{ needs.build_and_push.outputs.image_uri }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:            ${{ env.AWS_REGION }}

      - name: Debug IMAGE_URI
        run: echo "â†’ IMAGE_URI is '$IMAGE_URI'"

      - name: Prepare & sanitize ECS task definition
        id: task-def
        run: |
          sed -e "s|IMAGE_URI|${IMAGE_URI}|g" ecs-task-definition.json \
            | jq 'del(
                .compatibilities,
                .taskDefinitionArn,
                .requiresAttributes,
                .revision,
                .status,
                .registeredAt,
                .registeredBy,
                .containerDefinitions[].enableFaultInjection
              )' > task-def.json
          echo "taskDef=task-def.json" >> $GITHUB_OUTPUT

      - name: Register ECS task definition
        run: aws ecs register-task-definition --cli-input-json file://task-def.json

      - name: Update ECS service
        run: |
          aws ecs update-service \
            --cluster ${{ secrets.ECS_CLUSTER }} \
            --service ${{ secrets.ECS_SERVICE }} \
            --force-new-deployment

      - name: Wait for service stability
        run: |
          aws ecs wait services-stable \
            --cluster ${{ secrets.ECS_CLUSTER }} \
            --services ${{ secrets.ECS_SERVICE }}