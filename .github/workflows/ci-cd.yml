name: BYLT CI/CD Pipeline

on:
  push:
    branches: [ main ]

env:
  AWS_REGION:     ${{ secrets.AWS_REGION }}
  ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
  # Skip Mavenâ€™s Plexus security dispatcher
  MAVEN_OPTS:     "-Dplexus.security.dispatcher.skip=true"

jobs:
  build_and_push:
    runs-on: ubuntu-latest
    steps:
      # 1. Checkout
      - uses: actions/checkout@v3

      # 2. Setup Java
      - uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 17

      # 3. Package JAR (skip CI tests)
      - name: Build JAR
        run: ./mvnw --batch-mode package -DskipTests

      # 4. Configure AWS creds
      - uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:            ${{ env.AWS_REGION }}

      # 5. Login to ECR
      - id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # 6. Build & push Docker image
      - name: Build and push image
        env:
          IMAGE_TAG: ${{ github.sha }}
          REGISTRY:  ${{ steps.login-ecr.outputs.registry }}
        run: |
          # Use wildcard in case your JAR name changes
          docker build \
            -t $REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
            --build-arg JAR_FILE=$(ls target/*.jar) .
          docker push $REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "IMAGE_URI=$REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_ENV

  deploy:
    needs: build_and_push
    runs-on: ubuntu-latest
    steps:
      # 1. Checkout (for ecs-task-definition.json)
      - uses: actions/checkout@v3

      # 2. Configure AWS creds again
      - uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:            ${{ env.AWS_REGION }}

      # 3. Prepare & sanitize task definition
      - name: Render & clean task definition
        run: |
          # 3.1 Substitute IMAGE_URI
          sed -e "s|IMAGE_URI|${{ env.IMAGE_URI }}|g" ecs-task-definition.json \
            > task-def-raw.json

          # 3.2 Remove describe-only and FIS keys
          jq 'del(
                .compatibilities,
                .taskDefinitionArn,
                .requiresAttributes,
                .revision,
                .status,
                .registeredAt,
                .registeredBy,
                .containerDefinitions[].enableFaultInjection
              )' task-def-raw.json \
            > task-def.json

      # 4. Register the new task definition via AWS CLI (uses SDK v3)
      - name: Register ECS task definition
        run: |
          aws ecs register-task-definition \
            --cli-input-json file://task-def.json

      # 5. Update the service to use the new revision
      - name: Deploy service update
        run: |
          aws ecs update-service \
            --cluster ${{ secrets.ECS_CLUSTER }} \
            --service ${{ secrets.ECS_SERVICE }} \
            --force-new-deployment

      # 6. Wait until service is stable
      - name: Wait for service stability
        run: |
          aws ecs wait services-stable \
            --cluster ${{ secrets.ECS_CLUSTER }} \
            --services ${{ secrets.ECS_SERVICE }}