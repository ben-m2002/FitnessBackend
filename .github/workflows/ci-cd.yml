name: BYLT CI/CD Pipeline

on:
  push:
    branches: [ main ]

env:
  AWS_REGION:     ${{ secrets.AWS_REGION }}
  ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
  # Skip Maven’s Plexus security dispatcher
  MAVEN_OPTS:     "-Dplexus.security.dispatcher.skip=true"

jobs:
  build_and_push:
    runs-on: ubuntu-latest
    # Declare that this job will output a value called `image_uri`
    outputs:
      image_uri: ${{ steps.push-image.outputs.image_uri }}

    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 17

      - name: Build JAR
        run: ./mvnw --batch-mode package -DskipTests

      - uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # Build & push image *and* record the URI as a step output*
      - name: Build and push image
        id: push-image
        env:
          IMAGE_TAG: ${{ github.sha }}
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          docker build -t $REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          # Set the step output `image_uri`
          echo "image_uri=$REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

  deploy:
    needs: build_and_push
    runs-on: ubuntu-latest

    # Pull the output from the previous job into an env var
    env:
      IMAGE_URI: ${{ needs.build_and_push.outputs.image_uri }}

    steps:
      - uses: actions/checkout@v3
      - uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Debug IMAGE_URI
        run: echo "→ IMAGE_URI is '$IMAGE_URI'"

      - name: Prepare task definition
        id: task-def
        run: |
          # Now $IMAGE_URI is set correctly
          sed -e "s|IMAGE_URI|${IMAGE_URI}|g" ecs-task-definition.json \
            | jq 'del(
                .compatibilities,
                .taskDefinitionArn,
                .requiresAttributes,
                .revision,
                .status,
                .registeredAt,
                .registeredBy,
                .containerDefinitions[].enableFaultInjection
              )' \
            > task-def.json
          echo "taskDef=task-def.json" >> $GITHUB_OUTPUT

      - name: Register ECS task definition
        run: |
          aws ecs register-task-definition --cli-input-json file://task-def.json

      - name: Update service
        run: |
          aws ecs update-service \
            --cluster ${{ secrets.ECS_CLUSTER }} \
            --service ${{ secrets.ECS_SERVICE }} \
            --force-new-deployment

      - name: Wait for service stability
        run: |
          aws ecs wait services-stable \
            --cluster ${{ secrets.ECS_CLUSTER }} \
            --services ${{ secrets.ECS_SERVICE }}